# This .gitconfig needs at least one of the following to be installed
# https://github.com/git/git/tree/master/contrib/diff-highlight
# https://github.com/so-fancy/diff-so-fancy
# And you should consider installing
# https://github.com/jamiew/git-friendly
# I also have this lovely code installed:
# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash

[alias]
	c = commit -am
	up = pull
	p = push
	s = status -s
	df = diff --color --color-words --abbrev
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

	# Show the diff between the latest commit and the current state
	dlast = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	a   = commit --amend
	br  = branch
	c   = commit -am
	ca  = !git add -A && git commit                 # Commit all changes
	co  = checkout
	cp  = cherry-pick
	d   = diff
	dc  = diff --cached
	g   = log --graph --pretty=custom               # Show custom graph
	l   = log --pretty=custom                       # Show custom log
	lc  = shortlog --summary --numbered             # List contributors
	rlc = reset --hard HEAD~1                       # Remove last commit
	ulc = reset --soft HEAD~1                       # Undo last commit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"


[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
    autocrlf = input
    editor = vim
    excludesfile = ~/.gitignore

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


[push]
	# push easily. http://stackoverflow.com/a/23918418/89484
	default = current
    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out
    followTags = true

[include]

    path = ~/.gitconfig.local


[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# insanely beautiful diffs
	pager = diff-highlight | diff-so-fancy | less -r

[color]
	ui = always

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

	commit = green bold
    frag = magenta
    meta = yellow
    new = green
    old = red

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

# so much color
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

# git mergetool
[merge]
	tool = merger

# rewrites of repo paths
[url "git@github.com:"]
	insteadOf = "gh:"
	insteadOf = "git://github.com"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
	pushInsteadOf = "https://gist.github.com/"

# correct typos
[help]
	autocorrect = 1

# use separate file for username / github token / etc
[include]
  path = ~/.gitconfig.local

[init]
	templatedir = ~/.git_template

[mergetool "p4merge"]
	cmd = p4merge
